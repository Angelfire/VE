---
import type { GetStaticPathsOptions, Page } from "astro"
import type { CollectionEntry } from "astro:content"

import { getCollection } from "astro:content"

interface Props {
  page: Page<CollectionEntry<"blog" | "short">>
  uniqueTags: string[]
}

import BlogLayout from "@/layouts/BlogLayout.astro"
import Aside from "@/components/Aside.astro"
import Pagination from "@/components/Pagination.astro"
import PostExcerpt from "@/components/PostExcerpt.astro"

import { getFormattedDate, getUniqueTags, sortMDByDate } from "@/lib"

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const blogPosts = await getCollection("blog")
  const shortPosts = await getCollection("short")

  const allPosts = [...blogPosts, ...shortPosts]

  const sortedPosts = sortMDByDate(allPosts)
  const uniqueTags = getUniqueTags(allPosts)

  return paginate(sortedPosts, { props: { uniqueTags }, pageSize: 4 })
}

const { page, uniqueTags } = Astro.props
---

<BlogLayout
  title="Velocidad de Escape"
  description="Personal blog by AndrÃ©s Bedoya. I just want to share some personal things and others related to the headaches that programming produces."
>
  <div class="container mx-auto mb-16 px-4 md:px-0">
    <div class="flex flex-wrap">
      <Aside tags={uniqueTags} />
      <div class="w-full lg:w-3/4 lg:pl-8 xl:pl-12">
        <section>
          {
            page.data.map(async post => {
              const {
                slug,
                body,
                data: { title, pubDate, tags },
              } = post
              const isShort = "type" in post.data && post.data.type === "short"

              if (isShort) {
                const { Content } = await post.render()
                return (
                  <article class="mb-12 rounded-lg bg-slate-50 p-6 transition-all">
                    <div class="mb-4 flex items-center justify-between">
                      <span class="rounded bg-slate-200 px-2 py-1 text-xs text-slate-600">
                        short note
                      </span>
                      <time class="text-xs text-slate-500" datetime={pubDate.toDateString()}>
                        {getFormattedDate({ date: pubDate })}
                      </time>
                    </div>
                    <h2 class="mb-4 text-xl font-bold text-slate-800">{title}</h2>
                    <div class="prose prose-slate prose-sm prose-headings:text-slate-900 prose-p:text-slate-700 prose-a:text-blue-600 hover:prose-a:underline prose-code:rounded-sm prose-code:px-1 prose-code:text-blue-600 mb-4 max-w-none">
                      <Content />
                    </div>
                  </article>
                )
              }

              return (
                <article class="mb-12">
                  <header class="mb-4 flex items-end gap-6 border-b border-dashed border-slate-900 pb-1">
                    <time class="font-text pb-1 text-xs" datetime={pubDate.toDateString()}>
                      /{getFormattedDate({ date: pubDate })}
                    </time>
                    <h2 class="text-3xl font-bold text-slate-900">
                      <a href={`/${slug}`}>{title}</a>
                    </h2>
                  </header>
                  <p class="font-text mb-4 break-words">
                    <PostExcerpt text={body} maxLength={600} />
                  </p>
                  <div class="flex justify-end gap-4">
                    {tags?.map(tag => (
                      <p class="bg-slate-900 px-2 py-1 text-sm text-white">{tag}</p>
                    ))}
                  </div>
                </article>
              )
            })
          }
        </section>
        <Pagination page={page} url="/" />
      </div>
    </div>
  </div>
</BlogLayout>
