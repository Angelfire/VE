---
import type { GetStaticPathsOptions, Page } from "astro"
import type { CollectionEntry } from "astro:content"
import { getCollection } from "astro:content"

interface Props {
  page: Page<CollectionEntry<"short">>
}

import BlogLayout from "@/layouts/BlogLayout.astro"
import Aside from "@/components/Aside.astro"
import Pagination from "@/components/Pagination.astro"
import { getFormattedDate, getUniqueTags, sortMDByDate } from "@/lib"

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const shortPosts = await getCollection("short")
  const sortedPosts = sortMDByDate(shortPosts)
  const notePosts = sortedPosts.filter(post => post.data.tags?.includes("notes"))

  return paginate(notePosts, {
    params: { tag: "notes" },
    pageSize: 50,
  })
}

const { page } = Astro.props

const posts = await getCollection("blog")
const shortPosts = await getCollection("short")

const allPosts = [...posts, ...shortPosts]
const tags = getUniqueTags(allPosts)
---

<BlogLayout title="Velocidad de Escape - Notes" description="All short notes">
  <div class="container mx-auto mb-16 px-4 md:px-0">
    <div class="flex flex-wrap pt-4">
      <Aside tags={tags} />
      <div class="w-full lg:w-3/4 lg:pl-8 xl:pl-12">
        <section>
          <h2
            class="mb-5 bg-gradient-to-r from-pink-600 to-blue-600 bg-clip-text text-4xl font-bold text-transparent"
          >
            Notes
          </h2>
          {
            page.data.map(async post => {
              const {
                data: { title, pubDate },
              } = post
              const { Content } = await post.render()

              return (
                <article class="mb-12 rounded-lg bg-slate-50 p-6">
                  <div class="mb-4 flex items-center justify-between">
                    <span class="rounded bg-slate-200 px-2 py-1 text-xs text-slate-600">
                      short note
                    </span>
                    <time class="text-xs text-slate-500" datetime={pubDate.toDateString()}>
                      {getFormattedDate({ date: pubDate })}
                    </time>
                  </div>
                  <h2 class="mb-4 text-xl font-bold text-slate-800">{title}</h2>
                  <div class="prose prose-slate prose-sm mb-4 max-w-none">
                    <Content />
                  </div>
                </article>
              )
            })
          }
        </section>
        <Pagination page={page} url="/notes/" />
      </div>
    </div>
  </div>
</BlogLayout>
